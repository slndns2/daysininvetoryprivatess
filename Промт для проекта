# Промт для проекта "Дни До Нуля"

## Приветствие

Здравствуйте! Я помогу вам разработать проект "Дни До Нуля" - инструмент для продавцов на маркетплейсе Wildberries, который рассчитывает количество дней до исчерпания товара на складе и необходимый объем поставок.

## Описание проекта

"Дни До Нуля" - это система, состоящая из серверной части (прокси-сервер на Node.js) и клиентской части (Chrome-плагин), которая интегрируется с интерфейсом Wildberries и предоставляет продавцам важную информацию для управления запасами товаров.

### Основные функции:

1. **Расчет дней до нуля** - определение количества дней, через которое товар закончится на складе при текущем темпе продаж
2. **Расчет потребности к поставке** - определение необходимого количества товара для следующей поставки
3. **Цветовая индикация состояния запасов** - визуальное отображение состояния запасов (зеленый, оранжевый, красный)
4. **Интеграция с API Wildberries** - получение актуальных данных о товарах, остатках и продажах

## Технические требования

### Серверная часть:

1. **Технологии:**
   - Node.js
   - Express.js
   - node-fetch для запросов к API Wildberries
   - CORS для работы с Chrome-плагином

2. **Основные эндпоинты:**
   - `/api/orders` - получение заказов с API Wildberries
   - `/api/stocks` - получение остатков с API Wildberries
   - `/api/calculate` - расчет дней до нуля и потребности к поставке

3. **Обработка ошибок:**
   - Обработка ошибок авторизации (401)
   - Обработка ошибок сервера (500)
   - Логирование ошибок для отладки

### Клиентская часть:

1. **Технологии:**
   - JavaScript
   - Chrome Extension API
   - HTML/CSS для интерфейса

2. **Основные компоненты:**
   - Content Script для внедрения в страницы Wildberries
   - Background Script для обработки событий
   - Popup для настройки плагина
   - Storage для хранения настроек и API-ключа

3. **Функциональность:**
   - Отображение дней до нуля и потребности к поставке
   - Цветовая индикация состояния запасов
   - Обновление данных по запросу пользователя

## Формулы и алгоритмы

### 1. Расчет средних продаж в день

```
СредниеПродажи = КоличествоЗаказов / КоличествоДней
```

**Источник данных**: API-эндпоинт заказов (Orders)
- URL: `https://statistics-api.wildberries.ru/api/v1/supplier/orders`
- Параметры: dateFrom, dateTo
- Пример запроса: `GET /api/v1/supplier/orders?dateFrom=2025-05-09&dateTo=2025-05-23`

### 2. Расчет дней до нуля

```
ДниДоНуля = ТекущийОстаток / СредниеПродажи
```

**Источник данных**: 
- API-эндпоинт остатков (Stocks)
  - URL: `https://statistics-api.wildberries.ru/api/v1/supplier/stocks`
  - Параметры: dateFrom
  - Пример запроса: `GET /api/v1/supplier/stocks?dateFrom=2025-05-09`
- Результат расчета средних продаж

### 3. Расчет потребности к поставке

```
ПотребностьКПоставке = СредниеПродажи * ЖелаемыйЗапасДней - ТекущийОстаток
```

**Источник данных**:
- Результат расчета средних продаж
- Текущий остаток товара
- Желаемый запас дней (настраиваемый параметр)

### 4. Расчет потребности с учетом роста продаж

```
РостПродаж = ТекущиеСредниеПродажи - ПредыдущиеСредниеПродажи
ПрогнозируемыеПродажи = ТекущиеСредниеПродажи + РостПродаж
ПотребностьСУчетомРоста = ПрогнозируемыеПродажи * ЖелаемыйЗапасДней - ТекущийОстаток
```

## Цветовая индикация

Для визуального отображения состояния запасов используется цветовая индикация:

| Цвет | Описание |
|------|----------|
| **green** | Нормальный запас товара |
| **orange** | Низкий запас товара |
| **red** | Критический запас товара |

## API Wildberries

### 1. Эндпоинт: Остатки товаров (Inventory Stocks)

**URL:** `https://statistics-api.wildberries.ru/api/v1/supplier/stocks`

**Метод:** GET

**Обязательные параметры:**
- dateFrom - дата начала периода в формате YYYY-MM-DD

**Пример запроса:**
```javascript
const response = await fetch('https://statistics-api.wildberries.ru/api/v1/supplier/stocks?dateFrom=2025-05-17', {
  headers: {
    'Authorization': apiKey
  }
});
```

**Пример ответа:**
```json
[
  {
    "lastChangeDate": "2025-05-23T12:34:56",
    "supplierArticle": "пила-розовая-бесщет-4/6",
    "techSize": "0",
    "barcode": "2000000000017",
    "quantity": 69,
    "isSupply": true,
    "isRealization": true,
    "quantityFull": 69,
    "quantityNotInOrders": 69,
    "warehouseName": "Краснодар",
    "inWayToClient": 0,
    "inWayFromClient": 0,
    "nmId": 1234567,
    "subject": "Инструменты",
    "category": "Электроинструменты",
    "daysOnSite": 12,
    "brand": "Brand",
    "SCCode": "123456",
    "Price": 1500,
    "Discount": 0
  }
]
```

### 2. Эндпоинт: Заказы (Orders)

**URL:** `https://statistics-api.wildberries.ru/api/v1/supplier/orders`

**Метод:** GET

**Обязательные параметры:**
- dateFrom - дата начала периода в формате YYYY-MM-DD
- dateTo - дата конца периода в формате YYYY-MM-DD

**Пример запроса:**
```javascript
const response = await fetch('https://statistics-api.wildberries.ru/api/v1/supplier/orders?dateFrom=2025-05-17&dateTo=2025-05-24', {
  headers: {
    'Authorization': apiKey
  }
});
```

**Пример ответа:**
```json
[
  {
    "date": "2025-05-20",
    "lastChangeDate": "2025-05-20T12:34:56",
    "supplierArticle": "пила-розовая-бесщет-4/6",
    "techSize": "0",
    "barcode": "2000000000017",
    "totalPrice": 1500,
    "discountPercent": 0,
    "warehouseName": "Краснодар",
    "oblast": "Краснодарский край",
    "incomeID": 12345,
    "odid": 123456789,
    "nmId": 1234567,
    "subject": "Инструменты",
    "category": "Электроинструменты",
    "brand": "Brand",
    "isCancel": false,
    "cancel_dt": "0001-01-01T00:00:00",
    "gNumber": "123456789",
    "sticker": "12345678901234",
    "srid": "12345678901234567890"
  }
]
```

## Типичные проблемы и их решения

### Ошибка 500 при запросах к API

**Проблема**: Ошибка 500 (Internal Server Error) при запросах к API Wildberries.

**Причина**: Отсутствие обязательных параметров dateFrom и dateTo в запросах.

**Решение**: Автоматически добавлять параметры dateFrom и dateTo, если они не указаны.

### Ошибка CORS при запросах с плагина

**Проблема**: Ошибки CORS при запросах с плагина к серверу.

**Причина**: Неправильная настройка CORS на сервере.

**Решение**: Настроить CORS для работы с плагином.

### Ошибка авторизации при запросах к API

**Проблема**: Ошибка 401 (Unauthorized) при запросах к API Wildberries.

**Причина**: Неправильный формат API-ключа или отсутствие необходимых разрешений.

**Решение**: Проверять формат API-ключа и его права доступа.

## Примеры кода

### Серверная часть (Node.js)

```javascript
const express = require('express');
const fetch = require('node-fetch');

const app = express();

// Настройка CORS
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  next();
});

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Эндпоинт для получения заказов
app.get('/api/orders', async (req, res) => {
  try {
    const { apiToken, dateFrom, dateTo } = req.query;
    console.log(`Fetching orders: dateFrom=${dateFrom}, dateTo=${dateTo}`);
    const url = `https://statistics-api.wildberries.ru/api/v1/supplier/orders?dateFrom=${dateFrom}&dateTo=${dateTo}`;
    const response = await fetch(url, {
      headers: { Authorization: apiToken }
    });
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! Status: ${response.status}, StatusText: ${response.statusText}, Response: ${errorText}`);
    }
    const data = await response.json();
    console.log("Orders response:", data);
    res.status(200).json(data);
  } catch (error) {
    console.error("Error fetching orders:", error.message);
    res.status(500).json({ error: error.message });
  }
});

// Эндпоинт для получения остатков
app.get('/api/stocks', async (req, res) => {
  try {
    const { apiToken, dateFrom } = req.query;
    console.log(`Fetching stocks: dateFrom=${dateFrom}`);
    const url = `https://statistics-api.wildberries.ru/api/v1/supplier/stocks?dateFrom=${dateFrom}`;
    const response = await fetch(url, {
      headers: { Authorization: apiToken }
    });
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! Status: ${response.status}, StatusText: ${response.statusText}, Response: ${errorText}`);
    }
    const data = await response.json();
    console.log("Stocks response:", data);

    const stockDict = {};
    data.forEach(stock => {
      const article = stock.supplierArticle;
      const qty = stock.quantity || 0;
      const barcode = stock.barcode || "Нет данных";
      if (stockDict[article]) {
        stockDict[article].quantity += qty;
      } else {
        stockDict[article] = { quantity: qty, barcode };
      }
    });

    const stocks = Object.entries(stockDict).map(([article, { quantity, barcode }]) => ({
      supplierArticle: article,
      quantity,
      barcode
    }));
    console.log("Processed stocks:", stocks);
    res.status(200).json(stocks);
  } catch (error) {
    console.error("Error fetching stocks:", error.message);
    res.status(500).json({ error: error.message });
  }
});

app.listen(3000, () => console.log("Server running on port 3000"));
```

### Клиентская часть (Chrome-плагин)

```javascript
// Обработка строк таблицы
async function processTableRows(rows) {
  processingRows = true;
  
  try {
    // Собираем артикулы товаров
    const articles = [];
    rows.forEach(row => {
      const articleElement = row.querySelector('.goods-table__cell--article');
      if (articleElement) {
        const article = articleElement.textContent.trim();
        if (article) {
          articles.push(article);
        }
      }
    });
    
    if (articles.length === 0) {
      processingRows = false;
      return;
    }
    
    // Получаем данные для расчетов
    const newData = await fetchCalculationData(articles);
    if (newData && newData.results) {
      // Обновляем кэш данных
      newData.results.forEach(item => {
        calculationData[item.article] = item;
      });
      
      // Обновляем отображение
      updateStockDisplay(rows);
    }
  } catch (error) {
    console.error('Error processing table rows:', error);
  } finally {
    processingRows = false;
  }
}

// Обновление отображения остатков
function updateStockDisplay(rows) {
  rows.forEach(row => {
    try {
      // Получаем артикул товара
      const articleElement = row.querySelector('.goods-table__cell--article');
      if (!articleElement) return;
      
      const article = articleElement.textContent.trim();
      if (!article || !calculationData[article]) return;
      
      // Получаем ячейку с остатком
      const stockCell = row.querySelector('.goods-table__cell:nth-child(5)');
      if (!stockCell) return;
      
      const stockTextElement = stockCell.querySelector('.goods-table__cell-text');
      if (!stockTextElement) return;
      
      // Получаем данные расчета
      const data = calculationData[article];
      
      // Создаем индикатор
      const stockValue = stockTextElement.textContent.trim();
      const indicatorClass = `dtz-indicator--${data.colorIndication}`;
      
      // Формируем текст всплывающей подсказки
      let tooltipText = `Остаток: ${data.totalStock} шт.\n`;
      tooltipText += `Средние продажи: ${data.avgSalesPerDay.toFixed(2)} шт./день\n`;
      tooltipText += `Дни до нуля: ${data.daysToZero}\n`;
      
      if (data.supplyNeed > 0) {
        tooltipText += `Потребность к поставке: ${data.supplyNeed} шт.\n`;
      }
      
      // Создаем HTML для индикатора
      let indicatorHTML = `
        <div class="dtz-indicator ${indicatorClass}" title="${tooltipText}">
          <span>${stockValue}</span>
      `;
      
      // Добавляем информацию о потребности к поставке для оранжевых и красных индикаторов
      if (data.colorIndication === 'orange' || data.colorIndication === 'red') {
        indicatorHTML += `
          <div class="dtz-supply-need">потребность к поставке: ${data.supplyNeed} шт.</div>
        `;
      }
      
      indicatorHTML += `</div>`;
      
      // Обновляем DOM
      stockTextElement.innerHTML = indicatorHTML;
    } catch (error) {
      console.error('Error updating stock display for row:', error);
    }
  });
}
```

### Python-скрипт для расчета поставок

```python
def calculate_avg_sales_per_day(orders, period_days):
    sales_by_article = {}
    for order in orders:
        article = order.get("supplierArticle")
        is_canceled = order.get("isCanceled", False)
        if article and not is_canceled:
            if article not in sales_by_article:
                sales_by_article[article] = 0
            sales_by_article[article] += 1
    return {article: count / period_days for article, count in sales_by_article.items()}

def calculate_days_left(stocks, avg_sales):
    days_left = {}
    for stock in stocks:
        article = stock.get("supplierArticle")
        stock_qty = stock.get("quantity", 0)
        avg_sale = avg_sales.get(article, 0)
        days_left[article] = stock_qty / avg_sale if avg_sale > 0 else float('inf')
    return days_left

def calculate_simple_supply_need(avg_sales, threshold, stocks):
    supply_need = {}
    for stock in stocks:
        article = stock.get("supplierArticle")
        stock_qty = stock.get("quantity", 0)
        avg_sale = avg_sales.get(article, 0)
        need = max((avg_sale * threshold) - stock_qty, 0)
        supply_need[article] = need
    return supply_need
```

## Заключение

Проект "Дни До Нуля" предоставляет продавцам на Wildberries удобный инструмент для контроля остатков товаров и планирования поставок. Система помогает оптимизировать запасы, избегать дефицита товаров и повышать эффективность работы с маркетплейсом.

Я готов помочь вам с разработкой этого проекта, включая создание серверной части, клиентской части и интеграцию с API Wildberries. Давайте начнем с настройки окружения разработки и создания базовой структуры проекта.
